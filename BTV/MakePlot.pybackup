import ROOT as rt
from rootTools import tdrstyle as setTDRStyle
rt.gROOT.SetBatch()
setTDRStyle.setTDRStyle()

from ROOT import *
import math
import sys,os

VariableList = ['n_sv', 'nsv', 'sv_pt', 'sv_eta', 'sv_phi', 'sv_etarel', 'sv_phirel', 'sv_deltaR', 'sv_mass', 'sv_ntracks', 'sv_chi2', 'sv_ndf', 'sv_normchi2', 'sv_dxy', 'sv_dxyerr', 'sv_dxysig', 'sv_d3d', 'sv_d3derr', 'sv_d3dsig', 'sv_costhetasvpv', 'sv_enratio', 'npv', 'rho', 'ntrueInt', 'event_no', 'jet_no', 'gen_pt', 'Delta_gen_pt', 'isB', 'isGBB', 'isBB', 'isLeptonicB', 'isLeptonicB_C', 'isC', 'isGCC', 'isCC', 'isUD', 'isS', 'isG', 'isUndefined', 'genDecay', 'isPhysB', 'isPhysGBB', 'isPhysBB', 'isPhysLeptonicB', 'isPhysLeptonicB_C', 'isPhysC', 'isPhysGCC', 'isPhysCC', 'isPhysUD', 'isPhysS', 'isPhysG', 'isPhysUndefined', 'jet_pt', 'jet_corr_pt', 'jet_eta', 'jet_phi', 'jet_mass', 'jet_energy', 'jet_looseId', 'jet_qgl', 'QG_ptD', 'QG_axis2', 'QG_mult', 'y_multiplicity', 'y_charged_multiplicity', 'y_neutral_multiplicity', 'y_ptD', 'y_axis1', 'y_axis2', 'y_pt_dr_log', 'muons_number', 'electrons_number', 'muons_isLooseMuon', 'muons_isTightMuon', 'muons_isSoftMuon', 'muons_isHighPtMuon', 'muons_pt', 'muons_relEta', 'muons_relPhi', 'muons_energy', 'electrons_pt', 'electrons_relEta', 'electrons_relPhi', 'electrons_energy', 'gen_pt_Recluster', 'gen_pt_WithNu', 'Delta_gen_pt_Recluster', 'Delta_gen_pt_WithNu', 'pfCombinedInclusiveSecondaryVertexV2BJetTags', 'pfCombinedMVAV2BJetTags', 'pfDeepCSVJetTags_probb', 'pfDeepCSVJetTags_probbb', 'pfDeepCSVJetTags_probc', 'pfDeepCSVJetTags_probudsg', 'pfJetBProbabilityBJetTags', 'pfJetProbabilityBJetTags', 'softPFElectronBJetTags', 'softPFMuonBJetTags', 'n_Cpfcand', 'nCpfcand', 'Cpfcan_pt', 'Cpfcan_eta', 'Cpfcan_phi', 'Cpfcan_ptrel', 'Cpfcan_erel', 'Cpfcan_phirel', 'Cpfcan_etarel', 'Cpfcan_deltaR', 'Cpfcan_puppiw', 'Cpfcan_dxy', 'Cpfcan_dxyerrinv', 'Cpfcan_dxysig', 'Cpfcan_dz', 'Cpfcan_VTX_ass', 'Cpfcan_fromPV', 'Cpfcan_drminsv', 'Cpfcan_vertex_rho', 'Cpfcan_vertex_phirel', 'Cpfcan_vertex_etarel', 'Cpfcan_BtagPf_trackMomentum', 'Cpfcan_BtagPf_trackEta', 'Cpfcan_BtagPf_trackEtaRel', 'Cpfcan_BtagPf_trackPtRel', 'Cpfcan_BtagPf_trackPPar', 'Cpfcan_BtagPf_trackDeltaR', 'Cpfcan_BtagPf_trackPtRatio', 'Cpfcan_BtagPf_trackPParRatio', 'Cpfcan_BtagPf_trackSip3dVal', 'Cpfcan_BtagPf_trackSip3dSig', 'Cpfcan_BtagPf_trackSip2dVal', 'Cpfcan_BtagPf_trackSip2dSig', 'Cpfcan_BtagPf_trackDecayLen', 'Cpfcan_BtagPf_trackJetDistVal', 'Cpfcan_BtagPf_trackJetDistSig', 'Cpfcan_isMu', 'Cpfcan_isEl', 'Cpfcan_lostInnerHits', 'Cpfcan_numberOfPixelHits', 'Cpfcan_chi2', 'Cpfcan_quality', 'n_Npfcand', 'nNpfcand', 'Npfcan_pt', 'Npfcan_eta', 'Npfcan_phi', 'Npfcan_ptrel', 'Npfcan_erel', 'Npfcan_puppiw', 'Npfcan_phirel', 'Npfcan_etarel', 'Npfcan_deltaR', 'Npfcan_isGamma', 'Npfcan_HadFrac', 'Npfcan_drminsv', 'trackJetPt', 'jetNTracks', 'TagVarCSV_jetNSecondaryVertices', 'TagVarCSV_trackSumJetEtRatio', 'TagVarCSV_trackSumJetDeltaR', 'TagVarCSV_vertexCategory', 'TagVarCSV_trackSip2dValAboveCharm', 'TagVarCSV_trackSip2dSigAboveCharm', 'TagVarCSV_trackSip3dValAboveCharm', 'TagVarCSV_trackSip3dSigAboveCharm', 'n_TagVarCSV_jetNSelectedTracks', 'TagVarCSV_jetNSelectedTracks', 'TagVarCSVTrk_trackPtRel', 'TagVarCSVTrk_trackDeltaR', 'TagVarCSVTrk_trackPtRatio', 'TagVarCSVTrk_trackSip3dSig', 'TagVarCSVTrk_trackSip2dSig', 'TagVarCSVTrk_trackDecayLenVal', 'TagVarCSVTrk_trackJetDistVal', 'n_TagVarCSV_jetNTracksEtaRel', 'TagVarCSV_jetNTracksEtaRel', 'TagVarCSV_trackEtaRel', 'trackPParRatio', 'trackSip2dVal', 'trackSip3dVal', 'trackMomentum', 'trackEta', 'trackPPar', 'n_StoredVertices', 'NStoredVertices', 'TagVarCSV_vertexMass', 'TagVarCSV_vertexNTracks', 'TagVarCSV_vertexEnergyRatio', 'TagVarCSV_vertexJetDeltaR', 'TagVarCSV_flightDistance2dVal', 'TagVarCSV_flightDistance2dSig', 'TagVarCSV_flightDistance3dVal', 'TagVarCSV_flightDistance3dSig']

Pt_Range = [30.0,200.0,400.0,600.0,800.0,1000.0,1400.0,1800.0,2200.0,2600.0,3000.0,3500.0,4000.0,5000.0]

if __name__=='__main__':
  fin = TFile('out.root')
  logno = {}
  maxmin = open('maxmin.txt')
  max = {}
  maxx = {}
  maxxx = {}
  for i in maxmin.readlines():
    max[i.split()[0]] = -100000
    for pT in sorted([600.0,2600.0,4000.0]):
      plot  = fin.Get('pT'+str(int(pT))+'B_'+i.split()[0])
      for bin in range(100):
        aa = plot.GetBinContent(bin) 
        if aa >max[i.split()[0]]:
          max[i.split()[0]] =aa 
	  maxx[i.split()[0]] =pT
	  maxxx[i.split()[0]] = [600.0,2600.0,4000.0]
	  maxxx[i.split()[0]].remove(pT)

  print maxxx

  maxmin.close()

  color = {600.0:1,2600.0:2,4000.0:3}
  #print color[600.0]

  for i in VariableList:
    c = TCanvas()
#    if logno[i]:
#      c.SetLogy()
    leg = TLegend(0.7,0.7,0.9,0.9)
    plot  = fin.Get('pT'+str(int(maxx[i]))+'B_'+i)
    plot.SetLineColor(color[maxx[i]])
    leg.AddEntry(plot,'Pt%d-%d'%(int(maxx[i]),int(Pt_Range[Pt_Range.index(maxx[i])+1])),'L')
    plot.DrawNormalized()
    plot.SetTitle(i)
    for pT in maxxx[i]:
      plot  = fin.Get('pT'+str(int(pT))+'B_'+i)
      plot.SetLineColor(color[pT])
      leg.AddEntry(plot,'Pt%d-%d'%(int(pT),int(Pt_Range[Pt_Range.index(pT)+1])),'L')
      plot.DrawNormalized('same')
    leg.Draw('same')
    c.Print('%s_B.pdf'%i) 

  maxmin = open('maxmin.txt')
  max = {}
  maxx = {}
  maxxx = {}
  for i in maxmin.readlines():
    max[i.split()[0]] = -100000
    for pT in sorted([600.0,2600.0,4000.0]):
      plot  = fin.Get('pT'+str(int(pT))+'C_'+i.split()[0])
      for bin in range(100):
        aa = plot.GetBinContent(bin)
        if aa >max[i.split()[0]]:
          max[i.split()[0]] =aa
          maxx[i.split()[0]] =pT
          maxxx[i.split()[0]] = [600.0,2600.0,4000.0]
          maxxx[i.split()[0]].remove(pT) 

  for i in VariableList:
    c = TCanvas()
    leg = TLegend(0.7,0.7,0.9,0.9)
    plot  = fin.Get('pT'+str(int(maxx[i]))+'C_'+i)
    plot.SetLineColor(color[maxx[i]])
    leg.AddEntry(plot,'Pt%d-%d'%(int(maxx[i]),int(Pt_Range[Pt_Range.index(maxx[i])+1])),'L')
    plot.DrawNormalized()
    plot.SetTitle(i)
    for pT in maxxx[i]:
      plot  = fin.Get('pT'+str(int(pT))+'C_'+i)
      plot.SetLineColor(color[pT])
      leg.AddEntry(plot,'Pt%d-%d'%(int(pT),int(Pt_Range[Pt_Range.index(pT)+1])),'L')
      plot.DrawNormalized('same')
    leg.Draw('same')
    c.Print('%s_C.pdf'%i)

  maxmin = open('maxmin.txt')
  max = {}
  maxx = {}
  maxxx = {}
  for i in maxmin.readlines():
    max[i.split()[0]] = -100000
    for pT in sorted([600.0,2600.0,4000.0]):
      plot  = fin.Get('pT'+str(int(pT))+'_'+i.split()[0])
      for bin in range(100):
        aa = plot.GetBinContent(bin)
        if aa >max[i.split()[0]]:
          max[i.split()[0]] =aa
          maxx[i.split()[0]] =pT
          maxxx[i.split()[0]] = [600.0,2600.0,4000.0]
          maxxx[i.split()[0]].remove(pT) 

  maxmin.close()
  for i in VariableList:   
    c = TCanvas()
#      c.SetLogy() 
#    if logno[i]:
#      c.SetLogy()
    leg = TLegend(0.7,0.8,0.9,0.9)
    plot  = fin.Get('pT'+str(int(maxx[i]))+'_'+i)
    plot.SetLineColor(color[maxx[i]])
    leg.AddEntry(plot,'Pt%d-%d'%(int(maxx[i]),int(Pt_Range[Pt_Range.index(maxx[i])+1])),'L')
    plot.DrawNormalized()
    plot.SetTitle(i)
    for pT in maxxx[i]:
      plot  = fin.Get('pT'+str(int(pT))+'_'+i)
      plot.SetLineColor(color[pT])
      leg.AddEntry(plot,'Pt%d-%d'%(int(pT),int(Pt_Range[Pt_Range.index(pT)+1])),'L')
      plot.DrawNormalized('same')
    leg.Draw('same')
    c.Print('%s.pdf'%i)
